using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace SLW14
{
    public class BinaryTreeNode<TNode> : IComparable<TNode> where TNode : IComparable
    {

        public BinaryTreeNode<TNode> _left { get; set; }
        public BinaryTreeNode<TNode> _right { get; set; }
        private int _level;
        public TNode _value { get; private set; }

        public int Level { get => _level; set => _level = value; }

        public BinaryTreeNode(TNode value)
        {
            _value = value;
            _left = _right = null;
            _level = 0;
        }

        public int CompareTo(TNode other)
        {
            return _value.CompareTo(other);
        }
    }

    public class BinaryTree<T> where T : IComparable
    {
        private BinaryTreeNode<T> _head;
        private int _count;

        public BinaryTreeNode<T> GetHead { get => _head; }

        public void Add(T value)
        {
            if (_head == null)
            {
                _head = new BinaryTreeNode<T>(value);
            }
            else
            {
                AddTo(_head, value, 1);
            }

            _count++;
        }
        private void AddTo(BinaryTreeNode<T> node, T value, int lvl)
        {
            if (value.CompareTo(node._value) < 0)
            {
                if (node._left == null)
                {
                    node._left = new BinaryTreeNode<T>(value);
                    node._left.Level = lvl;
                }
                else
                {
                    AddTo(node._left, value, lvl + 1);
                }
            }
            else
            {
                if (node._right == null)
                {
                    node._right = new BinaryTreeNode<T>(value);
                    node._right.Level = lvl;
                }
                else
                {
                    AddTo(node._right, value, lvl + 1);
                }
            }
        }

        public void Print(BinaryTreeNode<T> node)
        {
            if (node != null)
            {
                for (int i = 0; i < node.Level; i++)
                    Console.Write(" | ");
                Console.WriteLine(node._value);
                Print(node._left);
                Print(node._right);
            }
        }
    }
    static class Program
    {
        [STAThread]
        static void Main()
        {
            //Application.EnableVisualStyles();
            //Application.SetCompatibleTextRenderingDefault(false);
            //Application.Run(new Form1());
            BinaryTree<int> tree = new BinaryTree<int>();
            tree.Add(5);
            tree.Add(3);
            tree.Add(4);
            tree.Add(6);
            tree.Add(8);
            tree.Add(7);
            tree.Add(4);
            tree.Print(tree.GetHead);
        }
    }
}
